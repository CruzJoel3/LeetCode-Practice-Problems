/*
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
*/

class Solution {
    public int climbStairs(int n) {
        //n = 1 --> 1 (output = 1)
        //n = 2 --> 1-1, 2 (output = 2)
        //n = 3 --> 1-1-1, 1-2, 2-1 (output = 3)
        //n = 4 --> 1-1-1-1, 1-1-2, 1-2-1, 2-2, 2-1-1 (output = 5)
        //n = 5 --> 1-1-1-1-1, 1-2-2, 1-1-1-2-2, 2-2-1, 2-1-2, 2-1-1-2, 2-1-2-1, 2-2-1-1 (output = 8) 
        //n = 6 --> 1-1-1-1-1-1, 1-1-1-1-2, 1-1-1-2-1, 1-1-2-1-1, 1-2-1-1-1 ,1-1-2-2, 1-2-1-2, 1-2-2-1, 2-2-2, 2-2-1-1, 2-1-2-1, 2-1-1-2, 2-1-1-1-1 (output = 13)
        
        //This is fibonacci sequence
        
        int holdingSolutions[] = new int[n];

        if(n == 1){
            return 1;
        }        
        else{        
            holdingSolutions[0] = 1;
            holdingSolutions[1] = 1;
            
            for(int i = 2; i < n; i++){
                holdingSolutions[i] = holdingSolutions[i-2] + holdingSolutions[i-1];
            }
        }
        
        return holdingSolutions[n-1] + holdingSolutions[n-2];
    }
}
