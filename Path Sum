/*
Provided a Binary Tree, find a path whose sum equals up to the value
of a passed in integer. If no path sum in the tree provides us with 
our desired value, return false
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        return dfs(root, 0, targetSum);
}
    public boolean dfs(TreeNode root,int sum, int targetSum){
        if(root == null){
            return false;
        }
        sum = sum + root.val;
        System.out.println("Value of Current Sum = " + sum);
        if(root.left == null && root.right == null){
            if(sum == targetSum){
                return true;
            }
        }
        return dfs(root.left, sum, targetSum) || dfs(root.right, sum, targetSum);
    }
}
