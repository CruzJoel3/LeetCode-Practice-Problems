/*
Given an nxm character matrix, see if a passed in word is located inside
of the matrix. When traversing through the matrix, you can only search with
letters that are adjacent to each other, and the same letter inside of the 
matrix (in a particular position) cannot be used more than once 
*/

class Solution {
    int iterator = 0;
    public boolean exist(char[][] board, String word) {
        List<Integer> rowHolder = new ArrayList<>();
        List<Integer> columnHolder = new ArrayList<>();
        char firstCharacter = word.charAt(0);
        boolean answer = false;
        int j = 0;
        
        for(int i = 0; i < board.length; i++){
            for(j = 0; j < board[0].length; j++){
                if(board[i][j] == firstCharacter){
                    rowHolder.add(i);
                    columnHolder.add(j);
                }
                j = 0;
            }
        }
        
        for(int i = 0; i < rowHolder.size(); i++){
            for(int k = i; k < i+1; j++){
                answer = traverser(board, word, board[rowHolder.get(i)][columnHolder.get(i)], 
                                   rowHolder.get(i), columnHolder.get(i));
                iterator = 0;
                if(answer == true){
                    return answer;
                }
            }
        }
        return false;
    }
    
    public boolean traverser(char[][] board, String currentWordCharacter, char currentBoardChar, 
                             int row, int column){
        if(currentWordCharacter.substring(iterator+1, iterator+2) == null){
            return true;
        }      
        else {
            if(board[row+1][column] == currentWordCharacter.charAt(iterator+1)){
                currentBoardChar = board[row+1][column];
                row++;
            }
            else if(board[row][column+1]  == currentWordCharacter.charAt(iterator+1)){
                currentBoardChar = board[row][column+1];
                column++;
            }
            else if(board[row-1][column]  == currentWordCharacter.charAt(iterator+1)){
                currentBoardChar = board[row-1][column];
                row--;
            }
            else if(board[row][column--]  == currentWordCharacter.charAt(iterator+1)){
                currentBoardChar = board[row][column-1];
                column--;
            }
            else{
                return false;
            }
        }
        iterator++;
        System.out.println("Print Number " + iterator);
        return traverser(board, currentWordCharacter, currentBoardChar, row, column);
    }
}
