/*
Given an integer array, find the continuous subarray (containing at least 
one number) which has the largest sum, and return that sum 
*/


class Solution {
    public int maxSubArray(int[] nums) {
        int currentSum = nums[0];
        int maxSum = nums[0];
        List<Integer> window = new ArrayList<Integer>();            
        window.add(nums[0]);


        for(int i = 1; i < nums.length; i++){
            window.add(nums[i]);
            if(currentSum > currentSum+nums[i]){
                currentSum = currentSum + nums[i];
                if((window.get(0) + nums[i]) <= 0){
                    currentSum = currentSum - window.get(0);
                    window.remove(0);
                }
            }
            else if(currentSum < currentSum+nums[i]){
                currentSum = currentSum + nums[i];
            }
            
            while(window.get(0) < 0){
                currentSum = currentSum - window.get(0);
                if(window.size() == 0){
                    currentSum = nums[i+1];
                    break;
                }
            }   
            if(currentSum > maxSum){
                maxSum = currentSum;
            }
        }
        return maxSum;
    }
}
