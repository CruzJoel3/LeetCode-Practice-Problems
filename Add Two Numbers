/*
Given two LinkedLists, add the values in each node
and return a LinkedList with it's own entries the result 
of that addition. Remember to carry over 1's

You are given two non-empty linked lists representing 
two non-negative integers. The digits are stored in reverse 
order, and each of their nodes contains a single digit. Add 
the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode listOne = l1.next;
        ListNode listTwo = l2.next;
        
        ListNode solution = new ListNode(l1.val + l2.val);
        ListNode finalList = solution;
        
        if(solution.val%100 > 9){
            solution.val = solution.val%10;
            solution.next = new ListNode(1);
            }
        
        while((listOne != null) && (listTwo != null)){
            if(solution.next == null){solution.next = new ListNode(0);}
            solution = solution.next;  
            if((listOne == null) || (listTwo == null)){
                if ((listOne == null)){
                    System.out.println("Get Here 1");
                    solution.val = solution.val + listTwo.val;
                    listTwo = listTwo.next;
                } 
                if ((listTwo == null)){
                    System.out.println("Get Here 2");
                    solution.val = solution.val + listOne.val;
                    listOne = listOne.next;
                } 
            }
            else{
                solution.val = solution.val + listOne.val + listTwo.val;
                listOne = listOne.next;
                listTwo = listTwo.next;
            }
  
            if(solution.val%100 > 9){
                solution.val = solution.val%10;
                solution.next = new ListNode(1);
            }
            else {
                if ((listOne == null) && (listTwo == null)) break;
                solution.next = new ListNode(0);
            }
        
        }
        return finalList;
    }
}
