/*
You're given an array full of numbers (coins), and an integer value. Assuming
you can use each array element (coin) as much as you want, determine the least amount coins you'd
need to add up to the passed in integer value.

If there is no combination of coins that can add up to the integer value, return -1
*/

class Solution {
    public int coinChange(int[] coins, int amount) {
        int dynamicArray[] = new int[amount+1];
        Arrays.fill(dynamicArray, amount+1);
        dynamicArray[0] = 0;
        for(int i = 1; i <= amount; i++){
            for(int j = 0; j < coins.length;j++){
                if(i - coins[j] == 0){
                    dynamicArray[i] = 1;
                    break;
                }
                else if(i - coins[j] < 0){
                    continue;
                }
                else {
                    if(dynamicArray[i - coins[j]] == amount+1){
                        continue;
                    }
                    else{
                        if(dynamicArray[i] < dynamicArray[i - coins[j]] + 1){
                            continue;
                        }
                        dynamicArray[i] = dynamicArray[i - coins[j]] + 1;
                    }
                }
            }
        }
        if(dynamicArray[amount] == amount+1){
            return -1;
        }
        else{
            return dynamicArray[amount];
        }
    }
}
